name: Development Cycle Workflow
description: Simplified development cycle from task planning to deployment with Notion tracking
version: "2.0.0"

metadata:
  workflow_id: development-cycle
  category: development
  estimated_duration: "Variable (1 hour to several days)"
  required_agents:
    - notion-agent
    - github-agent
    - project-manager-agent

trigger:
  command: "*start-development-cycle"
  required_params:
    - task_id
  optional_params:
    - assignee
    - priority
    - deadline

variables:
  cycle_types:
    feature:
      branch_prefix: "feature/"
      review_requirements: 2
      testing_required: true
    
    bugfix:
      branch_prefix: "bugfix/"
      review_requirements: 1
      testing_required: true
    
    hotfix:
      branch_prefix: "hotfix/"
      review_requirements: 2
      testing_required: true

stages:
  - stage: "planning"
    name: "Task Breakdown in Notion"
    agent: notion-agent
    description: "Plan and organize development work in Notion"
    tasks:
      - task: load_task_details
        description: "Load task from Notion and analyze requirements"
        inputs:
          - task_id
          - related_project_context
        outputs:
          - task_details
          - requirements_analysis
          - complexity_assessment
        
      - task: break_down_subtasks
        description: "Create subtasks in Notion if needed for complex work"
        inputs:
          - task_details
          - complexity_assessment
        outputs:
          - subtask_list
          - subtask_ids
          - work_breakdown
        
      - task: update_task_status_and_assignment
        description: "Mark task as In Progress and confirm assignment"
        inputs:
          - task_id
          - assignee
          - estimated_timeline
        outputs:
          - task_updated
          - progress_tracking_initialized
          - notion_status_set

  - stage: "development"
    name: "Code + Update Notion Progress"
    agent: github-agent
    depends_on: planning
    description: "Active development with real-time Notion progress updates"
    tasks:
      - task: create_development_branch
        description: "Create feature/bugfix branch and set up development environment"
        inputs:
          - task_details
          - project_repository
          - branch_naming_convention
        outputs:
          - branch_name
          - branch_url
          - development_environment_ready
        
      - task: implement_and_track
        description: "Execute development work with progress tracking"
        inputs:
          - task_details
          - work_breakdown
          - coding_standards
        outputs:
          - implementation_progress
          - code_commits
          - notion_progress_updates
        progress_tracking:
          - update_notion_percentage: "Update task progress percentage in real-time"
          - log_time_spent: "Track actual time spent vs estimates"
          - note_blockers: "Document any blockers or issues encountered"
          - update_status: "Keep Notion task status current"
        
      - task: create_pull_request
        description: "Create PR when development is complete"
        inputs:
          - branch_name
          - implementation_progress
          - task_details
        outputs:
          - pull_request_id
          - pull_request_url
          - pr_description_with_notion_links

  - stage: "review"
    name: "PR Review + Notion Status Sync"
    agent: project-manager-agent
    depends_on: development
    description: "Coordinate code review process and sync status with Notion"
    tasks:
      - task: coordinate_code_review
        description: "Manage PR review process with required approvals"
        inputs:
          - pull_request_id
          - review_requirements
          - task_complexity
        outputs:
          - review_assignments
          - review_status
          - approval_tracking
        
      - task: sync_review_status_to_notion
        description: "Update Notion task status to reflect review stage"
        inputs:
          - task_id
          - review_status
          - pull_request_url
        outputs:
          - notion_status_updated
          - review_progress_tracked
        
      - task: handle_review_feedback
        description: "Coordinate addressing any review feedback"
        inputs:
          - review_feedback
          - pull_request_id
        outputs:
          - feedback_addressed
          - final_approval_status
          - merge_ready_confirmation

  - stage: "deployment"
    name: "Deploy + Mark Complete in Notion"
    agent: github-agent
    depends_on: review
    description: "Deploy changes and finalize task completion in Notion"
    tasks:
      - task: merge_and_deploy
        description: "Merge PR and deploy to appropriate environment"
        inputs:
          - pull_request_id
          - final_approval_status
          - deployment_target
        outputs:
          - merge_status
          - deployment_status
          - deployment_url
        
      - task: verify_deployment
        description: "Run basic verification tests"
        inputs:
          - deployment_url
          - verification_checklist
        outputs:
          - verification_results
          - deployment_health
        
      - task: complete_notion_task
        description: "Mark task as complete and update all related records"
        inputs:
          - task_id
          - deployment_status
          - pull_request_url
          - actual_time_spent
        outputs:
          - task_marked_complete
          - project_progress_updated
          - completion_summary
        completion_actions:
          - set_status_complete: "Update task status to Complete"
          - record_actual_hours: "Log actual time spent vs estimated"
          - add_completion_notes: "Add notes about deployment and any lessons learned"
          - link_pr_and_deployment: "Link to PR and deployment URLs"
          - update_project_progress: "Update overall project completion percentage"

quality_gates:
  code_quality:
    - test_coverage: ">= 80%"
    - linting_errors: "= 0"
    - security_vulnerabilities: "= 0"
    - code_duplication: "< 5%"
  
  performance:
    - build_time: "< 10 minutes"
    - deployment_time: "< 5 minutes"
    - response_time: "< 200ms"
    - memory_usage: "< baseline + 10%"
  
  process:
    - code_reviews: ">= required_reviewers"
    - documentation_updated: "= true"
    - tests_passing: "= 100%"
    - approvals_obtained: "= true"

rollback_procedures:
  development_rollback:
    - Revert commits to last stable state
    - Clean up feature branches
    - Reset development environment
  
  deployment_rollback:
    - Trigger automated rollback procedure
    - Restore previous version
    - Verify rollback success
    - Update monitoring and alerts
  
  database_rollback:
    - Execute database migration rollback
    - Restore data consistency
    - Validate data integrity

error_handling:
  test_failures:
    action: "Block progression, require fixes"
    notification: "Alert development team and project manager"
    
  deployment_failures:
    action: "Initiate rollback procedure"
    escalation: "Page on-call engineer"
    
  quality_gate_failures:
    action: "Return to previous stage for remediation"
    notification: "Send quality report to team lead"

monitoring_and_metrics:
  cycle_metrics:
    - Cycle time (planning to deployment)
    - Lead time (request to delivery)
    - Code quality metrics
    - Deployment success rate
    - Rollback frequency
  
  team_performance:
    - Code review turnaround time
    - Test coverage trends
    - Bug introduction rate
    - Feature delivery velocity
  
  system_health:
    - Application performance
    - Error rates
    - Resource utilization
    - User satisfaction

notifications:
  cycle_start:
    recipients: [assignee, project_manager, team_lead]
    message: "Development cycle started for {task_name}"
  
  quality_gate_passed:
    recipients: [assignee, reviewers]
    message: "Quality gates passed for {task_name}"
  
  deployment_success:
    recipients: [team, stakeholders]
    message: "Successfully deployed {task_name} to {environment}"
  
  cycle_completion:
    recipients: [project_manager, stakeholders]
    message: "Development cycle completed for {task_name}"
    attachments: [cycle_report, performance_metrics]